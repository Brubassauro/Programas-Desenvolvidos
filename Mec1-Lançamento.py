# -*- coding: utf-8 -*-
"""Mecânica 1 - Problema desafio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l8x6TxeE-mMOqQFv92SDLKF0N9ft3tKy
"""

import numpy as np
import matplotlib.pyplot as plt

def f(dt,R,m,v,alp):
  a=4*1.3*4*3.14*R**2/m # = A/m (valor chutado)
  b=2*3.14*R**2*1.3*0.47/m # = B/m = Ar*p*Cd*0.5/m
  g=9.78 # gravidade [m/s]
  alp=30*2*3.14/360 #alpha em radianos

  vis=v*np.cos(alp) # Velocidade na direção s versor
  vik=v*np.sin(alp) # Velocidade na direção k versor

  vs=[vis] # Lista de velocidades da partícula em s 
  vk=[vik] # Lista de velocidades da partícula em k
  V=[v] # Lista de velocidades
  t=[0] # Lista dos  intervalos de tempo
  s=[0] # Lista das posições em s
  k=[0] # Lista das posições em k
  fv1=[a*v]
  fv2=[b*v**2]
  
  k0=0
  while k0>=0:  
    s0=s[len(s)-1] # Última posição em s
    k0=k[len(k)-1] # Última posição em k
    
    v0s=vs[len(vs)-1] # Última velocidade em s
    v0k=vk[len(vk)-1] # Última velocidade em k
  
    vs.append(v0s-dt*(a*v0s+b*np.sqrt(v0s**2+v0k**2)*v0s)) # Atualiza a velocidade em s
    vk.append(v0k-dt*(g+a*v0k+b*np.sqrt(v0s**2+v0k**2)*v0k)) # Atualiza a velocidade em k
    
    t.append(t[len(t)-1]+dt) # Atualiza o tempo
  
    s.append(s0+v0s*dt) # Atualiza a posição em s
    k.append(k0+v0k*dt) # Atualiza a posição em k
    
    fv1.append(a*np.sqrt(v0s**2+v0k**2)) # Atualiza F1
    fv2.append(b*(v0s**2+v0k**2)) # Atualiza F2

  plt.plot(s,k)
  plt.xlabel('Posição em s [m]')
  plt.ylabel('Posição em k [m]')
  plt.title('Trajetória da partícula')
  plt.show()
  
  plt.plot(t,fv1,color='red',label=r'F1')
  plt.plot(t,fv2,color='green',label=r'F2')
  plt.xlabel('Tempo [s]')
  plt.ylabel('Forças de arraste [N]')
  plt.scatter([0.82],[4])
  plt.legend()
  plt.title('Módulo das forças de arraste pelo tempo')
  plt.show()
  
  vs=[vis] # Lista de velocidades da partícula em s 
  vk=[vik] # Lista de velocidades da partícula em k
  V=[v] # Lista de velocidades
  t=[0] # Lista dos  intervalos de tempo
  s=[0] # Lista das posições em s
  k=[0] # Lista das posições em k
  fv1=[a*v]
  fv2=[b*v**2]
  
  k0=0
  while k0>=0:  
    s0=s[len(s)-1] # Última posição em s
    k0=k[len(k)-1] # Última posição em k
    
    v0s=vs[len(vs)-1] # Última velocidade em s
    v0k=vk[len(vk)-1] # Última velocidade em k
  
    vs.append(v0s-dt*(a*v0s)) # Atualiza a velocidade em s
    vk.append(v0k-dt*(g+a*v0k)) # Atualiza a velocidade em k
    
    t.append(t[len(t)-1]+dt) # Atualiza o tempo
  
    s.append(s0+v0s*dt) # Atualiza a posição em s
    k.append(k0+v0k*dt) # Atualiza a posição em k
    
    fv1.append(a*np.sqrt(v0s**2+v0k**2)) # Atualiza F1
    fv2.append(b*(v0s**2+v0k**2)) # Atualiza F2
    

  plt.plot(s,k,label=r'F1')

  vs=[vis] # Lista de velocidades da partícula em s 
  vk=[vik] # Lista de velocidades da partícula em k
  V=[v] # Lista de velocidades
  t=[0] # Lista dos  intervalos de tempo
  s=[0] # Lista das posições em s
  k=[0] # Lista das posições em k
  fv1=[a*v]
  fv2=[b*v**2]
  
  k0=0
  while k0>=0:  
    s0=s[len(s)-1] # Última posição em s
    k0=k[len(k)-1] # Última posição em k
    
    v0s=vs[len(vs)-1] # Última velocidade em s
    v0k=vk[len(vk)-1] # Última velocidade em k
  
    vs.append(v0s-dt*(b*np.sqrt(v0s**2+v0k**2)*v0s)) # Atualiza a velocidade em s
    vk.append(v0k-dt*(g+b*np.sqrt(v0s**2+v0k**2)*v0k)) # Atualiza a velocidade em k
    
    t.append(t[len(t)-1]+dt) # Atualiza o tempo
  
    s.append(s0+v0s*dt) # Atualiza a posição em s
    k.append(k0+v0k*dt) # Atualiza a posição em k
    
    fv1.append(a*np.sqrt(v0s**2+v0k**2)) # Atualiza F1
    fv2.append(b*(v0s**2+v0k**2)) # Atualiza F2
    

  plt.plot(s,k,label=r'F2')
  
  vs=[vis] # Lista de velocidades da partícula em s 
  vk=[vik] # Lista de velocidades da partícula em k
  V=[v] # Lista de velocidades
  t=[0] # Lista dos  intervalos de tempo
  s=[0] # Lista das posições em s
  k=[0] # Lista das posições em k
  fv1=[a*v]
  fv2=[b*v**2]
  
  k0=0
  while k0>=0:  
    s0=s[len(s)-1] # Última posição em s
    k0=k[len(k)-1] # Última posição em k
    
    v0s=vs[len(vs)-1] # Última velocidade em s
    v0k=vk[len(vk)-1] # Última velocidade em k
  
    vs.append(v0s-dt*(a*v0s+b*np.sqrt(v0s**2+v0k**2)*v0s)) # Atualiza a velocidade em s
    vk.append(v0k-dt*(g+a*v0k+b*np.sqrt(v0s**2+v0k**2)*v0k)) # Atualiza a velocidade em k
    
    t.append(t[len(t)-1]+dt) # Atualiza o tempo
  
    s.append(s0+v0s*dt) # Atualiza a posição em s
    k.append(k0+v0k*dt) # Atualiza a posição em k
    
    fv1.append(a*np.sqrt(v0s**2+v0k**2)) # Atualiza F1
    fv2.append(b*(v0s**2+v0k**2)) # Atualiza F2

  plt.plot(s,k,label=r'F1+F2')
  
  plt.xlabel('Posição em s [m]')
  plt.ylabel('Posição em k [m]')
  plt.title('Trajetória da partícula')
  plt.legend()
  plt.show()

f(0.001,0.06,1,30,45)

for i in range(1,10):
  print(i)

